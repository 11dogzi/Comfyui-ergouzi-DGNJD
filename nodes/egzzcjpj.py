import torch
from PIL import Image
import numpy as np
def tensor2pil(image):
    return Image.fromarray(np.clip(255. * image.cpu().numpy().squeeze(), 0, 255).astype(np.uint8))
def pil2tensor(image):
    return torch.from_numpy(np.array(image).astype(np.float32) / 255.0).unsqueeze(0)
def resize_mask(mask_pil, target_size):
    return mask_pil.resize(target_size, Image.LANCZOS)
def image2mask(image_pil):
    # Convert image to grayscale
    image_pil = image_pil.convert("L")
    # Convert grayscale image to binary mask
    threshold = 128
    mask_array = np.array(image_pil) > threshold
    return Image.fromarray((mask_array * 255).astype(np.uint8))
class EGZZHBCJNode:
    def __init__(self):
        pass
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "цибх╝П": (["хРИх╣╢", "шгБхЙк", "чЫ╕ф║д", "ф╕НчЫ╕ф║д"], {}),
            },
            "optional": {
                "х║ХщБоч╜йхЫ╛": ("IMAGE", {}),
                "х║ХщБоч╜й": ("MASK", {}),
                "ч┤ацЭРщБоч╜йхЫ╛": ("IMAGE", {}),
                "ч┤ацЭРщБоч╜й": ("MASK", {}),
            },
        }
    RETURN_TYPES = ("MASK", "IMAGE")
    RETURN_NAMES = ("хРИх╣╢щБоч╜й", "хРИх╣╢щБоч╜йхЫ╛")
    FUNCTION = "mask_цибх╝П"
    CATEGORY = "2ЁЯРХ/щБоч╜й"
    def mask_цибх╝П(self, цибх╝П, ч┤ацЭРщБоч╜йхЫ╛=None, х║ХщБоч╜йхЫ╛=None, ч┤ацЭРщБоч╜й=None, х║ХщБоч╜й=None):
        # Convert source and target images to masks if provided
        if ч┤ацЭРщБоч╜йхЫ╛ is not None:
            ч┤ацЭРщБоч╜й_pil = tensor2pil(ч┤ацЭРщБоч╜йхЫ╛)
            ч┤ацЭРщБоч╜й_pil = image2mask(ч┤ацЭРщБоч╜й_pil)
        else:
            ч┤ацЭРщБоч╜й_pil = tensor2pil(ч┤ацЭРщБоч╜й)
        if х║ХщБоч╜йхЫ╛ is not None:
            х║ХщБоч╜й_pil = tensor2pil(х║ХщБоч╜йхЫ╛)
            х║ХщБоч╜й_pil = image2mask(х║ХщБоч╜й_pil)
        else:
            х║ХщБоч╜й_pil = tensor2pil(х║ХщБоч╜й)
        # Resize source mask to target mask size
        ч┤ацЭРщБоч╜й_pil = resize_mask(ч┤ацЭРщБоч╜й_pil, х║ХщБоч╜й_pil.size)
        ч┤ацЭРщБоч╜й_array = np.array(ч┤ацЭРщБоч╜й_pil) > 0
        х║ХщБоч╜й_array = np.array(х║ХщБоч╜й_pil) > 0
        if цибх╝П == "хРИх╣╢":
            хРИх╣╢щБоч╜й_array = np.logical_or(ч┤ацЭРщБоч╜й_array, х║ХщБоч╜й_array)
        elif цибх╝П == "шгБхЙк":
            хРИх╣╢щБоч╜й_array = np.logical_and(х║ХщБоч╜й_array, np.logical_not(ч┤ацЭРщБоч╜й_array))
        elif цибх╝П == "чЫ╕ф║д":
            хРИх╣╢щБоч╜й_array = np.logical_and(ч┤ацЭРщБоч╜й_array, х║ХщБоч╜й_array)
        elif цибх╝П == "ф╕НчЫ╕ф║д":
            хРИх╣╢щБоч╜й_array = np.logical_xor(ч┤ацЭРщБоч╜й_array, х║ХщБоч╜й_array)
        else:
            raise ValueError("Invalid цибх╝П selected")
        хРИх╣╢щБоч╜й = Image.fromarray((хРИх╣╢щБоч╜й_array * 255).astype(np.uint8))
        хРИх╣╢щБоч╜й_tensor = pil2tensor(хРИх╣╢щБоч╜й)
        хРИх╣╢щБоч╜йхЫ╛_tensor = pil2tensor(хРИх╣╢щБоч╜й)
        return [хРИх╣╢щБоч╜й_tensor, хРИх╣╢щБоч╜йхЫ╛_tensor]

# цЬмхеЧцПТф╗╢чЙИцЭГцЙАх▒ЮBчлЩ@чБ╡ф╗ЩхД┐хТМф║МчЛЧхнРя╝Мф╗Еф╛Ыхнжф╣аф║дц╡Бф╜┐чФия╝МцЬкч╗ПцОИцЭГчжБцнвф╕АхИЗхХЖф╕ЪцАзш┤иф╜┐чФи
